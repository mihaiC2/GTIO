# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
networks:
  voting-network:
    driver: bridge
services:
  api-gw:
    build:
      context: api-gateway
    environment:
      NODE_ENV: production
    env_file:
      - api-gateway/production.env
    ports:
      - 4000:4000
    networks:
      - voting-network

  auth-service:
    build:
      context: auth-service
    environment:
      NODE_ENV: production
    env_file:
      - auth-service/.env
    expose:
      - 5000
    volumes:
      - ./logs/auth-service:/usr/src/app/dist/logs
    networks:
      - voting-network

  singer-service:
    build:
      context: singer-service
    environment:
      NODE_ENV: production
    env_file:
      - singer-service/.env
    expose:
      - 5001
    volumes:
      - ./logs/singer-service:/usr/src/app/dist/logs
    networks:
      - voting-network

  user-service:
    build:
      context: user-service
    environment:
      NODE_ENV: production
    env_file:
      - user-service/.env
    expose:
      - 5002
    volumes:
      - ./logs/user-service:/usr/src/app/dist/logs
    networks:
      - voting-network

  vote-service:
    build:
      context: vote-service
    environment:
      NODE_ENV: production
    env_file:
      - vote-service/.env
    expose:
      - 5003
    volumes:
      - ./logs/vote-service:/usr/src/app/dist/logs
    networks:
      - voting-network

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
